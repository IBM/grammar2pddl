# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from g2lserver.models.base_model_ import Model
from g2lserver import util
from g2lserver.models.pipeline_feedback_feedback import PipelineFeedbackFeedback

class PipelineFeedback(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, accuracy_low: float=None, accuracy_high: float=None, feedback: List[PipelineFeedbackFeedback]=None):  # noqa: E501
        """PipelineFeedback - a model defined in Swagger

        :param accuracy_low: The accuracy_low of this PipelineFeedback.  # noqa: E501
        :type accuracy_low: float
        :param accuracy_high: The accuracy_high of this PipelineFeedback.  # noqa: E501
        :type accuracy_high: float
        :param feedback: The feedback of this PipelineFeedback.  # noqa: E501
        :type feedback: List[PipelineFeedbackFeedback]
        """
        self.swagger_types = {
            'accuracy_low': float,
            'accuracy_high': float,
            'feedback': List[PipelineFeedbackFeedback]
        }

        self.attribute_map = {
            'accuracy_low': 'accuracyLow',
            'accuracy_high': 'accuracyHigh',
            'feedback': 'feedback'
        }

        self._accuracy_low = accuracy_low
        self._accuracy_high = accuracy_high
        self._feedback = feedback

    @classmethod
    def from_dict(cls, dikt) -> 'PipelineFeedback':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PipelineFeedback of this PipelineFeedback.  # noqa: E501
        :rtype: PipelineFeedback
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy_low(self) -> float:
        """Gets the accuracy_low of this PipelineFeedback.


        :return: The accuracy_low of this PipelineFeedback.
        :rtype: float
        """
        return self._accuracy_low

    @accuracy_low.setter
    def accuracy_low(self, accuracy_low: float):
        """Sets the accuracy_low of this PipelineFeedback.


        :param accuracy_low: The accuracy_low of this PipelineFeedback.
        :type accuracy_low: float
        """

        self._accuracy_low = accuracy_low

    @property
    def accuracy_high(self) -> float:
        """Gets the accuracy_high of this PipelineFeedback.


        :return: The accuracy_high of this PipelineFeedback.
        :rtype: float
        """
        return self._accuracy_high

    @accuracy_high.setter
    def accuracy_high(self, accuracy_high: float):
        """Sets the accuracy_high of this PipelineFeedback.


        :param accuracy_high: The accuracy_high of this PipelineFeedback.
        :type accuracy_high: float
        """

        self._accuracy_high = accuracy_high

    @property
    def feedback(self) -> List[PipelineFeedbackFeedback]:
        """Gets the feedback of this PipelineFeedback.


        :return: The feedback of this PipelineFeedback.
        :rtype: List[PipelineFeedbackFeedback]
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback: List[PipelineFeedbackFeedback]):
        """Sets the feedback of this PipelineFeedback.


        :param feedback: The feedback of this PipelineFeedback.
        :type feedback: List[PipelineFeedbackFeedback]
        """
        if feedback is None:
            raise ValueError("Invalid value for `feedback`, must not be `None`")  # noqa: E501

        self._feedback = feedback
