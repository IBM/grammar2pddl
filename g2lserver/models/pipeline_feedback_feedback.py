# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from g2lserver.models.base_model_ import Model
from g2lserver import util


class PipelineFeedbackFeedback(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, accuracy: float=None):  # noqa: E501
        """PipelineFeedbackFeedback - a model defined in Swagger

        :param id: The id of this PipelineFeedbackFeedback.  # noqa: E501
        :type id: str
        :param accuracy: The accuracy of this PipelineFeedbackFeedback.  # noqa: E501
        :type accuracy: float
        """
        self.swagger_types = {
            'id': str,
            'accuracy': float
        }

        self.attribute_map = {
            'id': 'id',
            'accuracy': 'accuracy'
        }

        self._id = id
        self._accuracy = accuracy

    @classmethod
    def from_dict(cls, dikt) -> 'PipelineFeedbackFeedback':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PipelineFeedback_feedback of this PipelineFeedbackFeedback.  # noqa: E501
        :rtype: PipelineFeedbackFeedback
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this PipelineFeedbackFeedback.


        :return: The id of this PipelineFeedbackFeedback.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this PipelineFeedbackFeedback.


        :param id: The id of this PipelineFeedbackFeedback.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def accuracy(self) -> float:
        """Gets the accuracy of this PipelineFeedbackFeedback.


        :return: The accuracy of this PipelineFeedbackFeedback.
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy: float):
        """Sets the accuracy of this PipelineFeedbackFeedback.


        :param accuracy: The accuracy of this PipelineFeedbackFeedback.
        :type accuracy: float
        """
        if accuracy is None:
            raise ValueError("Invalid value for `accuracy`, must not be `None`")  # noqa: E501

        self._accuracy = accuracy
